http://manuals.bioinformatics.ucr.edu/home/R_BioCondManual#TOC-Data-Preprocessing

Data Preprocessing

Generate a sample data set

y <- matrix(rnorm(50), 10, 5, dimnames=list(paste("g", 1:10, sep=""), paste("t", 1:5, sep=""))) # Creates a sample data matrix.
Table of Contents

Data centering and scaling

scale(t(y)); yscaled <- t(scale(t(y))); apply(yscaled, 1, sd) 
   # The function scale() centers and/or scales numeric matrices column-wise. When used with its default settings, the 
   # function returns columns that have a mean close to zero and a standard deviation of one. For row-wise scaling the 
   # data set needs to be transposed first using the t() function. Another transposing step is necessary to return the 
   # data set in its original orientation (same row/column assignment). Centering and scaling are common data transformation 
   # steps for many clustering techniques. 

Obtain a distance matrix

dist(y, method = "euclidean") 
   # Computes and returns a distance matrix for the rows in the data matrix 'y' using the specified distance measure, here 'euclidean'.
c <- cor(t(y), method="spearman"); d <- as.dist(1-c); d 
   # To obtain correlation-based distances, one has to compute first a correlation matrix with the cor() function. Since this 
   # step iterates across matrix columns, a transpose 't()' step is required to obtain row distances. In a second step the distance 
   # matrix object of class "dist" can be obtained with the as.dist() function. 


Hierarchical Clustering (HC)

The basic hierarchical clustering functions in R are hclust, flashClust, agnes and diana. Hclust and agnes perform agglomerative hierarchical clustering, while diana performs divisive hierarchical clustering. flashClust is a highly speed improved (50-100 faster) version of hclust. The pvclust package can be used for assessing the uncertainty in hierarchical cluster analyses. It provides approximately unbiased p-values as well as bootstrap p-values. As an introduction into R's standard hierarchical clustering utilities one should read the help pages on the following functions: hclust, dendrogram, as.dendrogram, cutree and heatmap. An example for sub-clustering (subsetting) heatmaps based on selected tree nodes is given in the last part of this section (see zoom into heatmaps). 

Clustering with hclust

y <- matrix(rnorm(50), 10, 5, dimnames=list(paste("g", 1:10, sep=""), paste("t", 1:5, sep=""))) # Creates a sample data set.
c <- cor(t(y), method="spearman"); d <- as.dist(1-c); hr <- hclust(d, method = "complete", members=NULL) 
   # This is a short example of clustering the rows of the generated sample matrix 'y' with hclust. Seven different cluster joining
   # methods can be selected with the 'method' argument: ward, single, complete, average, mcquitty, median and centroid. The 
   # object returned by hclust is a list of class hclust which describes the tree generated by the clustering process with the 
   # following components: merge, height, order, labels, method, call and dist.method.
par(mfrow = c(2, 2)); plot(hr, hang = 0.1); plot(hr, hang = -1) 
   # The generated tree can be plotted with the plot() function. When the hang argument is set to '-1' then all leaves end on 
   # one line and their labels hang down from 0. More details on the plotting behavior is provided in the hclust help document (?hclust).
plot(as.dendrogram(hr), edgePar=list(col=3, lwd=4), horiz=T) 
   # To plot trees horizontally, the hclust tree has to be transformed into a dendrogram object.
unclass(hr) # Prints the full content of the hclust object.
str(as.dendrogram(hr)) # Prints dendrogram structure as text.
hr$labels[hr$order] # Prints the row labels in the order they appear in the tree.
par(mfrow=c(2,1)); hrd1 <- as.dendrogram(hr); plot(hrd1); hrd2 <- reorder(hrd1, sample(1:10)); plot(hrd2); labels(hrd1); labels(hrd2) 
   # Example to reorder a dendrogram and print out its labels.
library(ctc); hc2Newick(hr) 
   # The 'hc2Newick' function of the Bioc 'ctc' library can convert a hclust object into the Newick tree file format for export 
   # into external programs.
   
   
   
Tree subsetting (see also Dynamic Tree Cut package)

mycl <- cutree(hr, h=max(hr$height)/2); mycl[hr$labels[hr$order]] 
   # Cuts tree into discrete cluster groups (bins) at specified height in tree that is specified by 'h' argument. 
   # Alternatively, one can cut based on a desired number of clusters that can be specified with the 'k' argument.
plot(hr); rect.hclust(hr, k=5, border="red") # Cuts dendrogram at specified level and draws rectangles around the resulting clusters.
subcl <- names(mycl[mycl==3]); subd <- as.dist(as.matrix(d)[subcl,subcl]); subhr <- hclust(subd, method = "complete"); par(mfrow = c(1, 2)); plot(hr); plot(subhr) 
   # This example shows how one can subset a tree by cutting it at a given branch point provided by the cutree() function. 
   # The identified row IDs are then used to subset the distance matrix and re-cluster it with hclust.
lapply(as.dendrogram(hr), unlist); lapply(as.dendrogram(hr)[[1]], unlist) 
   # Returns the indices of the cluster members of the two main branches. The second step returns the members of the next two 
   # descendent clusters of the first main branch.
example(hclust) 
   # The last step in this example shows how the 'members' argument can be used to reconstruct a hierarchical 
   # tree above the cut points using the cluster centers. More details on this can be found in the hclust help document.
source("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/My_R_Scripts/selectNodes.R"); Uniclusters <- nodes2Cluster(myhclust=hr, rootdist=2); clusterQCselect <- clusterQC(clusterlist=Uniclusters, simMatrix=as.matrix(c), method="min", cutoff=0.7, output="df"); clusterQCselect 
   # The function 'nodes2Cluster' cuts the tree at all height levels as defined in 'hr$height' and the second function 'clusterQC' 
   # selects clusters based on a given minimum cutoff in an all-against-all comparison within each cluster. The 'method' argument 
   # allows to calculate the cutoff value with one of the following functions: "min", "qu1", "median", "mean", "qu3" and "max". The 
   # end result can be returned as list (output="list") or as data frame (output="df"). The argument 'rootdist' defines the starting 
   # distance from the root of the tree to avoid testing of very large clusters. 
   
   
   
   
